.n-color-swatches {
  display: flex;
  flex-wrap: wrap;
  margin-bottom: $spacing-component-bottom;
}

.n-color-swatch {
  margin-bottom: $spacing-component-bottom;
  width: 110px;
}

.n-color-swatch__note {
  display: inline-block;
  font-size: $font-size-xs;
  width: 480px;
}

.n-color-swatch__hex-code,
.n-color-swatch__scss-variable {
  font-size: $font-size-xs;
}

.n-color-swatch__sample {
  height: 80px;
  margin-bottom: 5px;
  width: 80px;
}

.n-color-swatch__label {
  font-size: $font-size-sm;
  margin-bottom: 5px;
  margin-top: 0;
}

$colors: (
  // NetApp brand colors
  color-blue:           $color-blue,
  color-blue-dark:      $color-blue-dark,
  // Neutral colors
  color-black:          $color-black,
  color-gray-27:        $color-gray-27,
  color-gray-36:        $color-gray-36,
  color-gray-41:        $color-gray-41,
  color-gray-61:        $color-gray-61,
  color-gray-64:        $color-gray-64,
  color-gray-87:        $color-gray-87,
  color-gray-97:        $color-gray-97,
  // Accent colors
  color-blue-lighter:   $color-blue-lighter,
  color-blue-light:     $color-blue-light,
  color-green:          $color-green,
  color-purple:         $color-purple,
  color-orange:         $color-orange,
  // The following colors may NOT be unused per new color palette.
  // leaving these here until removed/replaced appropriately.
  color-brand-primary:  $color-blue-light,
  color-white:          $color-white,
  color-gray-52:        $color-gray-52,
  color-gray-95:        $color-gray-95,
  color-green-light:    $color-green,
  color-text-default:   $color-text-default,
  color-text-light:     $color-text-light
);

$background-colors: (
  // NetApp brand colors
  color-blue:           $color-blue,
  color-blue-dark:      $color-blue-dark,
  // Neutral colors
  color-black:          $color-black,
  color-gray-27:        $color-gray-27,
  color-gray-36:        $color-gray-36,
  color-gray-41:        $color-gray-41,
  color-gray-61:        $color-gray-61,
  color-gray-64:        $color-gray-64,
  color-gray-87:        $color-gray-87,
  color-gray-97:        $color-gray-97,
  // Accent colors
  color-blue-light:     $color-blue-light,
  color-green:          $color-green,
  color-purple:         $color-purple,
  color-orange:         $color-orange,
  // The following colors may NOT be unused per new color palette.
  // leaving these here until removed/replaced appropriately.
  color-white:          $color-white,
  color-gray-52:        $color-gray-52,
  color-gray-95:        $color-gray-95,
  color-danger-light:   $color-danger-light
);

$text-colors: (
  // NetApp brand colors
  color-blue:           $color-blue,
  color-blue-dark:      $color-blue-dark,
  // Neutral colors
  color-black:          $color-black,
  color-gray-27:        $color-gray-27,
  color-gray-36:        $color-gray-36,
  color-gray-41:        $color-gray-41,
  color-gray-61:        $color-gray-61,
  color-gray-64:        $color-gray-64,
  color-gray-87:        $color-gray-87,
  color-gray-97:        $color-gray-97,
  // Accent colors
  color-blue-light:     $color-blue-light,
  color-green:          $color-green,
  color-purple:         $color-purple,
  color-orange:         $color-orange,
  // The following colors may NOT be unused per new color palette.
  // leaving these here until removed/replaced appropriately.
  color-text-default:   $color-text-default,
  color-text-light:     $color-text-light,
  color-green-light:    $color-green,
  color-white:          $color-white,
  color-danger:         $color-danger,
  color-yellow:         $color-yellow
);

// Returns the factorial of a non-negative integer.
// @param {Number} $x A non-negative integer.
// @return {Number}
// @example
//     fact(0) // 1
//     fact(8) // 40320
@function fact ($x) {
  @if $x < 0 or $x != floor($x) {
    @warn 'Argument for `fact()` must be a positive integer.';
    @return null;
  }
  $ret: 1;
  @while $x > 0 {
    $ret: $ret * $x;
    $x: $x - 1;
  }
  @return $ret;
}

// Returns E^x, where x is the argument, and E is Euler's constant, the base of the natural logarithms.
// @param {Number} $x
// @example
//     exp(1)  // 2.71828
//     exp(-1) // 0.36788
@function exp ($x) {
  $ret: 0;
  @for $n from 0 to 24 {
    $ret: $ret + pow($x, $n) / fact($n);
  }
  @return $ret;
}

// Returns base to the exponent power.
// @param {Number} $base The base number
// @param {Number} $exp The exponent to which to raise base
// @return {Number}
// @example
//     pow(4, 2)   // 16
//     pow(4, -2)  // 0.0625
//     pow(4, 0.2) // 1.31951
@function pow ($base, $exp) {
  @if $exp == floor($exp) {
      $r: 1;
      $s: 0;
      @if $exp < 0 {
          $exp: $exp * -1;
          $s: 1;
      }
      @while $exp > 0 {
          @if $exp % 2 == 1 {
              $r: $r * $base;
          }
          $exp: floor($exp * .5);
          $base: $base * $base;
      }
      @return if($s != 0, 1 / $r, $r);
  } @else {
      @return exp(log($base) * $exp);
  }
}

// Returns $x * 2^$exp
// @param {Number} $x
// @param {Number} $exp
@function ldexp ($x, $exp) {
  $b: if($exp >= 0, 2, 1 / 2);
  @if $exp < 0 {
      $exp: $exp * -1;
  }
  @while $exp > 0 {
    @if $exp % 2 == 1 {
        $x: $x * $b;
    }
    $b: $b * $b;
    $exp: floor($exp * .5);
  }
  @return $x;
}

// Returns a two-element list containing the normalized fraction and exponent of number.
// @param {Number} $x
// @return {List} fraction, exponent
@function frexp ($x) {
  $exp: 0;
  @if $x < 0 {
      $x: $x * -1;
  }
  @if $x < .5 {
      @while $x < .5 {
          $x: $x * 2;
          $exp: $exp - 1;
      }
  } @else if $x >= 1 {
      @while $x >= 1 {
          $x: $x / 2;
          $exp: $exp + 1;
      }
  }
  @return $x, $exp;
}

// Returns the natural logarithm of a number.
// @param {Number} $x
// @example
//     log(2)  // 0.69315
//     log(10) // 2.30259
$ln2:   .6931471805599453;
$sqrt2: 1.4142135623730951;

@function log ($x) {
  @if $x <= 0 {
      @return 0 / 0;
  }
  $k: nth(frexp($x / $sqrt2), 2);
  $x: $x / ldexp(1, $k);
  $x: ($x - 1) / ($x + 1);
  $x2: $x * $x;
  $i: 1;
  $s: $x;
  $sp: null;
  @while $sp != $s {
    $x: $x * $x2;
    $i: $i + 2;
    $sp: $s;
    $s: $s + $x / $i;
  }
  @return $ln2 * $k + 2 * $s;
}

/* scss-lint:disable all */
@function color-luminance($color) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
  $rgba: red($color), green($color), blue($color);
  $rgba2: ();

  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: $rgb / 255;

    $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));

    $rgba2: append($rgba2, $rgb);
  }



  @return 0.2126 * nth($rgba2, 1) + 0.7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);
}

@function color-contrast($color1, $color2) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
  $luminance1: color-luminance($color1) + .05;
  $luminance2: color-luminance($color2) + .05;
  $ratio: $luminance1 / $luminance2;

  @if $luminance2 > $luminance1 {
    $ratio: 1 / $ratio;
  }

  $ratio: round($ratio * 10) / 10;

  @return $ratio;
}

@function color($key) {
  @return map-get($colors, $key);
}

@each $name, $value in $colors {
  .n-color-swatch__sample--#{$name} {
    background: $value;
    @if lightness($value) >= 99% {
      border: solid 1px $color-gray-95;
    }

    .n-color-swatch__hex-code,
    .n-color-swatch__scss-variable {
      display: block;
      font-size: $font-size-sm;
      @if lightness($value) >= 50% {
        color: $color-black;
      } @else {
        color: $color-white;
      }
    }
  }
}

.n-color-swatch-table.n-data-table {
  border-collapse: collapse;
  margin-bottom: $spacing-lg;
  width: 100%;

  .n-color-swatch-table-header {
    text-align: center;
  }

  tbody {
    background: repeating-linear-gradient(40deg, #F8F8F8, #F8F8F8 10px, #FFFFFF 10px, #FFFFFF 20px);
  }

  tbody tr:nth-child(even) {
    background: transparent;
  }

  td.n-color-swatch-contrast-chart__item--separator {
    height: 2px;
    background: #CCC;
    padding: 0;
  }

  td {
    border: 0;
  }
}

.n-color-swatch-contrast-chart__item {
  font-family: 'Courier New', Courier, monospace;
}

.n-color-swatch__positioning-wrap {
  padding-top: 20px;
  position: relative;
  text-align: center;
  width: 100%;
}

.n-color-swatch__status--passing,
.n-color-swatch__status--failing {
  display: none;
  font-size: $font-size-sm;
  height: 20px;
  padding: 2px 4px;
  position: absolute;
  right: -15px;
  top: -12px;
  width: 60px;

  svg {
    height: 10px;
    width: 10px;
  }
}

.n-color-swatch__sample-swatch {
  // border: solid 1px #ccc;
  display: inline-block;
  height: 16px;
  margin-right: 2px;
  position: relative;
  top: 2px;
  width: 16px;
}

@each $name, $color in $background-colors {
  @each $text-name, $text-color in $text-colors {
    $contrast-ratio: color-contrast($text-color, $color);
    .n-color-swatch-contrast--#{str-slice(quote($color), 2)}-#{str-slice(quote($text-color), 2)} {
      background: $color;
      color: $text-color;

      .n-color-swatch__status--passing,
      .n-color-swatch__status--failing {
        &:after {
          content: '#{$contrast-ratio}';
          display: inline-block;
          margin-left: $spacing-xs;
        }
      }

      .n-color-swatch__sample-swatch {
        background: $text-color;
      }

      @if $contrast-ratio >= 4.5 {
        .n-color-swatch__status--passing {
          color: limegreen;
          display: block;

          svg {
            fill: limegreen;
          }
        }
      } @else {
        .n-color-swatch__status--failing {
          color: red;
          display: block;

          svg {
            fill: red;
          }
        }
      }
    }
  }
}
